public class solution2 {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2){
        if (l1 == null && l2 == null) return null;

        ListNode sumBegin = null;
        ListNode sumEnd = sumBegin;
        int carry = 0;

        while (l1 != null && l2 != null){
            int sum = l1.val + l2.val + carry;
            ListNode newNum = new ListNode(sum % 10);
            if (sumBegin == null){
                sumBegin = newNum;
                sumEnd = sumBegin;
            } else {
                sumEnd.next = newNum;
                sumEnd = newNum;
            }
                l1 = l1.next;
                l2 = l2.next;
                carry = sum / 10;
            }
        while ( l1 != null){
            int sum = l1.val + carry;
            ListNode end = new ListNode(sum % 10);
            sumEnd.next = end;
            sumEnd = end;
            carry = sum / 10;
            l1 = l1.next;
        }
        while ( l2 != null){
            int sum = l2.val + carry;
            ListNode end = new ListNode(sum % 10);
            sumEnd.next = end;
            sumEnd = end;
            carry = sum / 10;
            l2 = l2.next;
        }
        while (carry != 0){
            ListNode end = new ListNode (carry);
            sumEnd.next = end;
        }
        return sumBegin;
    }
    // if the digits are in forward order, then reverse the list
    // then do the above.
    public static ListNode reverse(ListNode l){
        ListNode reverse = null;
        while ( l != null){
            ListNode next = l.next;
            l.next = reverse;
            reverse = l;
            l = next;
        }
        return reverse;
    }

}
